<program> ::= <statement>

<int> ::= LEX_INT

<boolean> ::= true
	| false

<string> ::= " LEX_STR "

<identifier> ::= $ <identifier0>
<identifier0> ::= LEX_ID <array>
<array> ::= // lambda
	| <array_list>

<array_list> ::= [ <expression> ] <array_list0>
<array_list0> ::= // lambda
	| <array_list>

<operator> ::= +
	| -
	| *
	| /
	| %

<expression0> ::= <int>
	| <identifier>
	| <string>
	| <fname> ( <expression_list> )
	| ( <expression> )
	| <lambda_expression>
<expression> ::= <expression0> <expression1>
<expression1> ::= // lambda
	| <operator> <expression>
<lambda_expression> ::= lambda ( <arg0> ) { <return> }

<expression_list> ::= <expression> <expression_list0>
<expression_list0> ::= // lambda
	| , <expression_list>

<boolean_expression> ::= <boolean>
	| <expression> <boolean_expression0>
	| ! <boolean_expression>
<boolean_expression0> ::= <comparator> <expression>
	| <boolean_operator> <expression>
	| //lambda needed for the "not"

// condition may further be on identifiers (to test if it exists) (not handled)
<condition> ::= <boolean_expression>

<comparator> ::= <
	| >
	| >=
	| <=
	| ==
	| !=

<boolean_operator> ::= or
	| and

<arg0> ::= <identifier> <arg>
<arg> ::= // lambda
	| , <arg0>

<fname> ::= LEX_FNAME

<declaration> ::= <identifier> <declaration0>
<declaration0> ::= // lambda
	| = <expression>

<if> ::= if ( <condition> ) { <statement> } <if0>
<if0> ::= else { <statement> }
	| // lambda

<function> ::= function <fname> ( <arg0> ) { <statement_list> <return> }

<return> ::= return <expression> ;

<statement0> ::= <declaration> ;
	| while ( <condition> ) { <statement> }
	| <if>
	| say ( <expression> ) ;
	| listen ( <identifier> ) ;
	| <function>
	| map ( <lambda_expression> , <identifier> ) ;
	| read ( <identifier> ) ;
	| write ( <identifier> ) ;
	| size ( <identifier> , <identifier> ) ;
	| array ( <identifier> , <int> ) ;

<statement> ::= <statement0> <statement_list>
<statement_list> ::= // lambda
	| <statement>
